name: Publish to npm

on:
  push:
    branches:
      - master

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR title from last commit
        id: get_pr_title
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          # Remove any newlines and trim whitespace
          COMMIT_MSG=$(echo "$COMMIT_MSG" | tr -d '\n' | xargs)
          echo "commit_message=$COMMIT_MSG" >> $GITHUB_OUTPUT

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org/'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      - name: Dry run publish
        run: pnpm publish --access public --no-git-checks --dry-run

      - name: Bump version based on commit message
        id: bump_version
        run: |
          COMMIT_MSG="${{ steps.get_pr_title.outputs.commit_message }}"
          VERSION_TYPE="patch"

          # Convert to lowercase for case-insensitive matching
          COMMIT_MSG_LOWER=$(echo "$COMMIT_MSG" | tr '[:upper:]' '[:lower:]')

          if [[ "$COMMIT_MSG_LOWER" =~ ^major: ]]; then
            VERSION_TYPE="major"
          elif [[ "$COMMIT_MSG_LOWER" =~ ^minor: ]]; then
            VERSION_TYPE="minor"
          elif [[ "$COMMIT_MSG_LOWER" =~ ^patch: ]]; then
            VERSION_TYPE="patch"
          else
            echo "::error::Commit message must start with major:, minor:, or patch:"
            echo "::error::Current commit message: $COMMIT_MSG"
            exit 1
          fi

          echo "Determined version type: $VERSION_TYPE"

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          pnpm version ${VERSION_TYPE}
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          git push origin master --follow-tags

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          release_name: Release v${{ steps.bump_version.outputs.new_version }}
          body: |-
            Release version v${{ steps.bump_version.outputs.new_version }}
          draft: false
          prerelease: false

      - name: Publish to npm
        run: pnpm publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
